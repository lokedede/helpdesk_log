# define input file location.
input {
  file {
    path => "/logstash_tmp/Helpdesk_interview_data_set"
    start_position => "beginning"
    sincedb_path => "/dev/null"
  }
}
# use filter to get desired fields.
filter {
# use grok filter patterns to get fields from each line of log
  grok {
     match => { "message" => "%{MONTH} +%{MONTHDAY} (?<timeWindow>(?!<[0-9])(?:2[0123]|[01]?[0-9])):%{MINUTE}(?::%{SECOND})(?![0-9]) (?<deviceName>(?:[A-Z0-9]+)) %{PROG:processName}(?:\[%{POSINT:processID}\])?:? %{GREEDYDATA:description}" }
  }

# use filters to generate timeWindow field from timestamps in log
  mutate {
     add_field => { "nextHour" => "%{timeWindow}" }
  }
  mutate {
     convert => { "nextHour" => "integer" }
  }
  ruby {
     code => 'event.set("nextHour", event.get("nextHour") + 1)'
  }
  if [nextHour] < 10 {
     mutate {
        replace => { "nextHour" => "0%{nextHour}" }
     }
  }
  mutate {
     replace => { "timeWindow" => "%{timeWindow}-%{nextHour}" }
  }

  mutate {
     remove_field => [ "nextHour" ]
  }

#  aggregate {
#     task_id => "%{timeWindow}"
#     code => "map['deviceName'] = event.get('device_name'); map['processID'] = event.get('pid'); map['processName'] = event.get('program_name'); map['description'] = event.get('msg')"
#     push_map_as_event_on_timeout => true
#     timeout_task_id_field => "timeWindow"
#     timeout => 3600
#     inactivity_timeout => 120
#     timeout_tags => ['_aggregatetimeout']
#     timeout_code => "event.set('deviceName', map['deviceName']); event.set('processID', map['processID'])"
#  }

}

# output result logs in json format
output {
  file {
    path => "/logstash_tmp/output.json"
    codec => json
  }
}
